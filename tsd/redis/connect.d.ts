import { Client } from "redis";
export default class Connect {
    connect: Client;
    constructor(connect: any);
    get(key: string, callback: Function): this;
    getPromise(key: string): any;
    set(key: string, value: string, callback: Function): this;
    setPromise(key: string, value: string): any;
    close(): this;
    validate(): any;
    hmset(key: any, value: any, callback: any): void;
    hmget(key: any, ks: any, callback: any): this;
    hmgetPromise(key: any, ks: any): any;
    del(key: string, callback: any): this;
    delPromise(key: string): any;
    rpush(key: string, value: string, callback: any): void;
    rpushPromise(key: string, value: string): any;
    lpush(key: string, value: string, callback: any): this;
    lpushPromise(key: string, value: string): any;
    llen(key: string, callback: Function): this;
    llenPromise(key: string): any;
    lrange(key: any, start: any, end: any, callback: any): this;
    lrangePromise(key: any, start: any, end: any): any;
    lpop(key: any, callback: any): this;
    lpopPromise(key: any): any;
    rpop(key: any, callback: any): this;
    rpopPromise(key: any): any;
    blpop(keys: any, timeout: any, callback: any): this;
    blpopPromise(keys: any, timeout: any): any;
    lindex(key: any, index: any, callback: any): this;
    lindexPromise(key: any, index: any): any;
    lset(key: any, index: any, obj: any, callback: any): this;
    lsetPromise(key: any, index: any, obj: any): any;
    lrem(key: any, count: any, value: any, callback: any): void;
    lremPromise(key: any, count: any, value: any): any;
    sadd(key: any, value: any, callback: any): void;
    sismember(key: any, value: any, callback: any): void;
    scard(key: any, callback: any): void;
    srem(key: any, value: any, callback: any): void;
    sdiff(key: any, setName: any, callback: any): void;
    sdiffstore(key: any, setName: any, callback: any): void;
    sinter(key: any, setName: any, callback: any): void;
    sinterstore(key: any, setName: any, callback: any): void;
    sunion(key: any, setName: any, callback: any): void;
    sunionstore(key: any, setName: any, callback: any): void;
    smembers(key: any, callback: any): void;
    spop(key: any, callback: any): void;
    srandmember(key: any, callback: any): void;
    smove(key: any, value: any, setName: any, callback: any): void;
    zadd(key: any, k: any, score: any, callback: any): void;
    zrem(key: any, k: any, callback: any): void;
    zcard(key: any, callback: any): void;
    zscore(key: any, k: any, callback: any): void;
    zrange(key: any, min: any, max: any, WITHSCORES: any, callback: any): void;
    zrevrange(key: any, min: any, max: any, WITHSCORES: any, callback: any): void;
    zrevrangebyscore(key: any, min: any, max: any, WITHSCORES: any, callback: any): void;
    zrangebyscore(key: any, min: any, max: any, WITHSCORES: any, callback: any): void;
    zremrangebyscore(key: any, min: any, max: any, callback: any): void;
    zremrangebyrank(key: any, min: any, max: any, callback: any): void;
    keys(key: any, callback: any): void;
}
